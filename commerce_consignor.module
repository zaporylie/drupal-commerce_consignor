<?php

/**
 * @file
 * Consignor Shipment integration module.
 */

/**
 * Implements hook_menu().
 */
function commerce_consignor_menu() {
  $items = array();

  $items['commerce_consignor/label/%'] = array(
    'page callback' => 'commerce_consignor_get_label',
    'page arguments' => array(2),
    'access arguments' => array('commerce consignor label'),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'commerce_consignor_label_delivery_callback',
  );

  $items['admin/commerce/config/shipping/commerce_consignor'] = array(
    'title' => 'Consignor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_consignor_settings_form'),
    'access arguments' => array('administer shipping'),
    'file' => 'commerce_consignor.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function commerce_consignor_libraries_info() {
  $libraries['consignor'] = array(
    'name' => 'Consignor',
    'vendor url' => 'http://blog.edi-soft.no/',
    'download url' => 'https://github.com/zaporylie/consignor-php/archive/master.zip',
    'version' => 'master',
    'files' => array(
      'php' => array(
        'src/Consignor/Load.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_permission().
 */
function commerce_consignor_permission() {
  return array(
    'commerce consignor label' => array(
      'title' => t('Print shipping label'),
    ),
  );
}

/**
 * Implements hook_commerce_order_status_info().
 */
function commerce_consignor_commerce_order_status_info() {
  $status['packed'] = array(
    'name' => 'packed',
    'title' => t('Packed'),
    'state' => 'pending',
    'weight' => 99,
  );
  return $status;
}

/**
 * Implements hook_theme().
 */
function commerce_consignor_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_consignor' => array(
      'variables' => array(
        'shipment_id' => NULL,
        'shipment' => NULL,
        'label' => NULL,
        'tracking_code' => NULL,
      ),
    ),
    'commerce_consignor_label' => array(
      'variables' => array(
        'shipment_id' => NULL,
      ),
    ),
    'commerce_consignor_tracking_code' => array(
      'variables' => array(
        'tracking_code' => NULL,
        'tracking_url' => NULL,
      ),
    ),
  );
}

/**
 * Commerce Consignor extra field in order display.
 *
 * @param array $variables
 *   Check hook_theme() to see what variables are available.
 *
 * @return string
 *   Returns markup for tracking code.
 */
function theme_commerce_consignor($variables = array()) {
  return $variables['tracking_code'];
}

/**
 * Tracking code format.
 *
 * @param array $variables
 *   Check hook_theme() to see what variables are available.
 *
 * @return string
 *   Returns markup for tracking code.
 */
function theme_commerce_consignor_tracking_code($variables = array()) {
  if (isset($variables['tracking_url'])) {
    return l($variables['tracking_code'], $variables['tracking_url'], array());
  }
  return $variables['tracking_code'];
}

/**
 * Displays label for shipment ID.
 *
 * @param array $variables
 *   Check hook_theme() to see what variables are available.
 *
 * @return string
 *   Returns markup for tracking code.
 */
function theme_commerce_consignor_label($variables = array()) {
  $url = url('commerce_consignor/label/' . $variables['shipment_id']);
  return l(theme('image', array(
    'path' => $url,
    'alt' => t('Shipment label'),
    'width' => 200,
  )), $url, array('html' => TRUE, 'attributes' => array('target' => '_blank')));
}

/**
 * Implements hook_field_extra_fields().
 */
function commerce_consignor_field_extra_fields() {
  $extra['commerce_order']['commerce_order'] = array(
    'display' => array(
      'commerce_consignor_shipment' => array(
        'label' => t('Shipment'),
        'description' => t('Shipment ID and label'),
        'weight' => 99,
      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function commerce_consignor_entity_view($entity, $type, $view_mode, $langcode) {
  if (isset($entity->data['commerce_consignor']['shipment_id']) && $shipment_id = $entity->data['commerce_consignor']['shipment_id']) {
    $entity->content['commerce_consignor_shipment'] = array(
      '#type' => 'item',
      '#title' => t('Consignor'),
      array(
        '#theme' => 'commerce_consignor',
        '#shipment_id' => $shipment_id,
        '#shipment' => commerce_consignor_get_shipment($shipment_id),
        '#label' => theme('commerce_consignor_label', array('shipment_id' => $shipment_id)),
        '#tracking_code' => theme('commerce_consignor_tracking_code', array('tracking_code' => commerce_consignor_get_tracking_code($shipment_id), 'tracking_url' => commerce_consignor_get_tracking_url($shipment_id))),
      ),
    );
  }
}

/**
 * Creates new shipment using Consignor API.
 *
 * @param object $order
 *   Commerce Order object.
 * @param array $data
 *   Additional data.
 *
 * @return int|bool
 *   If correct - returns shipment id, if false - FALSE.
 */
function commerce_consignor_create_shipment($order, $data = array()) {
  if (!_commerce_consignor_load_library()) {
    return FALSE;
  }
  try {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $client = new \Consignor\ShipmentAPI(variable_get('commerce_consignor_server', 'http://consignorsupport.no/ship/ShipmentServerModule.dll'), variable_get('commerce_consignor_actor', 63), variable_get('commerce_consignor_key', 'sample'));

    $data['Kind'] = \Consignor\ShipmentAPI::CONSIGNOR_SHIPMENT_KIND_ESKNORMAL;
    $data['ActorCSID'] = variable_get('commerce_consignor_actor', 63);
    $data['OrderNo'] = $wrapper->getIdentifier();
    $client->Shipment = new \Consignor\Structure\Shipment($data);

    $client->Shipment->addValue('Addresses', new \Consignor\Structure\Address(array(
      'Kind' => \Consignor\ShipmentAPI::CONSIGNOR_ADDRESS_KIND_ESAKRECEIVER,
      'Name1' => $wrapper->commerce_customer_shipping->commerce_customer_address->name_line->value(),
      'Street1' => $wrapper->commerce_customer_shipping->commerce_customer_address->thoroughfare->value(),
      'Street2' => $wrapper->commerce_customer_shipping->commerce_customer_address->premise->value(),
      'PostCode' => $wrapper->commerce_customer_shipping->commerce_customer_address->postal_code->value(),
      'City' => $wrapper->commerce_customer_shipping->commerce_customer_address->locality->value(),
      'CountryCode' => $wrapper->commerce_customer_shipping->commerce_customer_address->country->value(),
    )));
    $client->Shipment->addValue('Lines', new \Consignor\Structure\Line(array(
      'Number' => 1,
    )));

    // Make it alterable.
    drupal_alter('commerce_consignor_create_shipment', $client, $order);

    $data = $client->createShipment();
    return $data->getValue('ShpCSID');
  }
  catch (Exception $e) {
    watchdog_exception('commerce_consignor', $e);
    return FALSE;
  }
}

/**
 * Gets shipment details.
 *
 * @param int $shipment_id
 *   Shipment ID.
 * @param bool $reset
 *   True if cache should be cleaned.
 *
 * @return bool|\Consignor\Structure\Shipment
 *   Returns /Consignor/Shipment object if shipment exists, FALSE if not.
 */
function commerce_consignor_get_shipment($shipment_id, $reset = FALSE) {
  if (!_commerce_consignor_load_library()) {
    return FALSE;
  }
  if (!$reset) {
    $shipments =& drupal_static(__FUNCTION__);
    if (isset($shipments[$shipment_id])) {
      $cache =& $shipments[$shipment_id];
    }
    if (empty($cache)) {
      $cache_data = cache_get(__FUNCTION__ . '_' . $shipment_id);
      $cache = isset($cache_data->data) ? $cache_data->data : NULL;
    }
    if (!empty($cache)) {
      return $cache;
    }
  }
  try {
    $client = new \Consignor\ShipmentAPI(variable_get('commerce_consignor_server', 'http://consignorsupport.no/ship/ShipmentServerModule.dll'), variable_get('commerce_consignor_actor', 63), variable_get('commerce_consignor_key', 'sample'), $shipment_id);
    $cache = $client->Shipment;
  }
  catch (Exception $e) {
    watchdog_exception('commerce_consignor', $e);
    return FALSE;
  }

  cache_set(__FUNCTION__ . '_' . $shipment_id, $cache);
  return $cache;
}

/**
 * Get shipment label.
 *
 * @param int $shipment_id
 *   Shipment ID.
 * @param bool $reset
 *   True if cache should be cleaned.
 *
 * @return bool|null
 *   Base65 encoded image.
 */
function commerce_consignor_get_label($shipment_id, $reset = FALSE) {
  if (!_commerce_consignor_load_library()) {
    return FALSE;
  }
  if (!$reset) {
    $shipments =& drupal_static(__FUNCTION__);
    if (isset($shipments[$shipment_id])) {
      $cache =& $shipments[$shipment_id];
    }
    if (empty($cache)) {
      $cache_data = cache_get(__FUNCTION__ . '_' . $shipment_id);
      $cache = isset($cache_data->data) ? $cache_data->data : NULL;
    }
    if (!empty($cache)) {
      return $cache;
    }
  }
  try {
    $client = new \Consignor\ShipmentAPI(variable_get('commerce_consignor_server', 'http://consignorsupport.no/ship/ShipmentServerModule.dll'), variable_get('commerce_consignor_actor', 63), variable_get('commerce_consignor_key', 'sample'));
    $client->Shipment->setValue('ShpCSID', $shipment_id);
    $cache = $client->getLabel();
  }
  catch (Exception $e) {
    watchdog_exception('commerce_consignor', $e);
    return FALSE;
  }

  cache_set(__FUNCTION__ . '_' . $shipment_id, $cache);
  return $cache;
}

/**
 * Prints shipment label.
 *
 * Adds headers and delivers menu item as a image.
 *
 * @param string $label
 *   Base64 encoded image.
 */
function commerce_consignor_label_delivery_callback($label) {
  // Prepare headers.
  $headers = array(
    'Content-type' => 'Content-Type: image/png;',
    'Cache-Control' => 'max-age=0',
    'Accept-Ranges' => 'none',
  );

  // Set headers.
  foreach ($headers as $name => $value) {
    drupal_add_http_header($name, $value);
  }
  drupal_send_headers();

  print base64_decode($label);
}

/**
 * Get tracking code from shipment object.
 *
 * @param int $shipment_id
 *   Shipment ID.
 * @param bool $reset
 *   TRUE if cache should be cleared.
 *
 * @return bool|string
 *   Returns tracking code if exist, FALSE if not.
 */
function commerce_consignor_get_tracking_code($shipment_id, $reset = FALSE) {
  $shipment = commerce_consignor_get_shipment($shipment_id, $reset);
  if (!_commerce_consignor_load_library()) {
    return FALSE;
  }
  try {
    $line = $shipment->getValue('Lines', 0);
    $package = $line->getValue('Pkgs', 0);
    return $package->getValue('PkgNo');
  }
  catch (Exception $e) {
    watchdog_exception('commerce_consignor', $e);
    return FALSE;
  }
}

/**
 * Get tracking URL.
 *
 * @param int $shipment_id
 *   Shipment ID.
 * @param bool $reset
 *   TRUE if cache should be cleared.
 *
 * @return bool|string
 *   Tracking URL if shipment exists, FALSE if not.
 */
function commerce_consignor_get_tracking_url($shipment_id, $reset = FALSE) {
  if (!_commerce_consignor_load_library()) {
    return FALSE;
  }
  if (!$reset) {
    $shipments =& drupal_static(__FUNCTION__);
    if (isset($shipments[$shipment_id])) {
      $cache =& $shipments[$shipment_id];
    }
    if (empty($cache)) {
      $cache_data = cache_get(__FUNCTION__ . '_' . $shipment_id);
      $cache = isset($cache_data->data) ? $cache_data->data : NULL;
    }
    if (!empty($cache)) {
      return $cache;
    }
  }
  try {
    $client = new \Consignor\ShipmentAPI(variable_get('commerce_consignor_server', 'http://consignorsupport.no/ship/ShipmentServerModule.dll'), variable_get('commerce_consignor_actor', 63), variable_get('commerce_consignor_key', 'sample'));
    $client->Shipment->setValue('ShpCSID', $shipment_id);
    $cache = $client->getTrackingURL();
  }
  catch (Exception $e) {
    watchdog_exception('commerce_consignor', $e);
    return FALSE;
  }

  cache_set(__FUNCTION__ . '_' . $shipment_id, $cache);
  return $cache;
}

/**
 * Wraps getProducts API method.
 *
 * @return bool|array
 *   FALSE if list couldn't be retrieved, array if success.
 */
function _commerce_consignor_get_products() {
  $cache =& drupal_static(__FUNCTION__);
  if (empty($cache)) {
    $cache_data = cache_get(__FUNCTION__);
    $cache = $cache_data->data;
  }
  if (!empty($cache)) {
    return $cache;
  }
  if (!_commerce_consignor_load_library()) {
    return FALSE;
  }
  try {
    $client = new \Consignor\ConsignorServer(variable_get('commerce_consignor_server', 'http://consignorsupport.no/ship/ShipmentServerModule.dll'), variable_get('commerce_consignor_actor', 63), variable_get('commerce_consignor_key', 'sample'));
    $cache = $client->getProducts();
  }
  catch (Exception $e) {
    watchdog_exception('commerce_consignor', $e);
    return FALSE;
  }
  cache_set(__FUNCTION__, $cache);
  return $cache;
}

/**
 * Returns list of products in options list format.
 *
 * @param bool $flatten
 *   Determines if a list should contain optgroups or not.
 *
 * @return array
 *   One or two level array of products.
 */
function commerce_consignor_products_options_list($flatten = FALSE) {
  $carriers = _commerce_consignor_get_products();
  $options = array();
  if (empty($carriers)) {
    return $options;
  }
  foreach ($carriers as $carrier) {
    foreach ($carrier->Subcarriers as $subcarrier) {
      foreach ($subcarrier->Products as $product) {
        if (!isset($product->ProdConceptID) || !isset($carrier->CarrierShortName) || !isset($subcarrier->SubcarrierName) || !isset($product->ProdName)) {
          continue;
        }
        $options[$carrier->CarrierShortName . ' - ' . $subcarrier->SubcarrierName][$product->ProdConceptID] = $product->ProdName;
      }
    }
  }
  if ($flatten) {
    return options_array_flatten($options);
  }
  return $options;
}

/**
 * Flatten option list.
 *
 * Rules can't tak two level option list and it can't take option list callback
 * with parameter as well. This is the way how we can bypass limitations.
 *
 * @return array
 *   Flatten option list.
 */
function commerce_consignor_products_options_list_flatten() {
  return commerce_consignor_products_options_list(TRUE);
}

/**
 * Loads Consignor API library.
 *
 * @return bool
 *   FALSE if library cannot by loaded.
 */
function _commerce_consignor_load_library() {
  // Load library.
  if (!($library = libraries_load('consignor')) || empty($library['loaded'])) {
    watchdog('commerce_consignor', 'Unable to load Consignor library.', array(), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}
